; Copyright (c) uib gmbh (www.uib.de)
; This sourcecode is owned by uib
; and published under the Terms of the General Public License.
; credits: http://www.opsi.org/en/credits/
[Initial]
SetLogLevel=6
;  Log Errors in Logfile but don't abort:
ExitOnError=false
; Show syntax errors in the script:
ScriptErrorMessages=on
; Dont trace step by step through the script:
TraceMode=off
; let started programs run in front of the winst window
StayOnTop=false

[Actions]
requiredWinstVersion >= "4.10.8.6"

DefVar $MsiId32$
DefVar $UninstallProgram32$
DefVar $MsiId64$
DefVar $UninstallProgram64$
DefVar $LogDir$
DefVar $ProductId$ 
DefVar $ProductName$ 
DefVar $MinimumSpace$
DefVar $InstallDir$
DefVar $InstallDir32$
DefVar $InstallDir64$
DefVar $ExitCode$
DefVar $ErrorMsg$
DefVar $LicenseRequired$
DefVar $LicenseKey$
DefVar $LicensePool$
DefVar $INST_SystemType$
DefVar $INST_architecture$
; Installationsart (1=Lokal, 2=Netz)
DefVar $propINSTALLART$
; Clientart(1=basic, 2=standard)
DefVar $propCLIENTART$
; Installationsumfang (1=Normal, 2=Full)
DefVar $propINSTALLUMFANG$
; abhängige FixPack Product-ID
DefVar $propFIXPACK$
DefVar $AnwendTemp$
DefVar $DatenVz$
DefVar $LinkVzStart$
DefVar $LinkVzDesktop$
DefStringList $Local_users_unfiltered$
DefVar $Local_users_filter$

Set $INST_SystemType$ = GetSystemType
set $INST_architecture$ = GetProductProperty("install_architecture","system specific")
Set $LogDir$ = "%SystemDrive%\tmp"
Set $AnwendTemp$ = $LogDir$ + "\notesinst"

; ------------------------------------------------
; - Reboot Controler                             -
DefVar $Flag$
DefVar $WinstRegKey$
DefVar $RebootRegVar$
Set $WinstRegKey$ = "HKLM\SOFTWARE\opsi.org\winst"
Set $Flag$ = GetRegistryStringValue32("["+$WinstRegKey$+"] "+"RebootFlag")
; ----------------------------------------------------------------

include_append "%ScriptPath%\subroutines.opsiscript"
include_append "%ScriptPath%\check_msi_exitcode.opsiscript"

; ----------------------------------------------------------------
; - Please edit the following values                             -
; ----------------------------------------------------------------
Set $ProductId$       = "lotus-notes"
Set $ProductName$     = "Lotus Notes 8.5.3"
Set $MinimumSpace$    = "5 GB"
; the path were we find the product after the installation
Set $InstallDir32$      = "%ProgramFiles32Dir%\Notes"
; MUSS derzeit entsprechend gleich sein !!!!
Set $InstallDir64$      = "%ProgramFiles32Dir%\Notes"
Set $LicenseRequired$ = "true"
Set $LicensePool$     = "p_" + $ProductId$
Set $propINSTALLART$  = GetProductProperty("install_art","Netz")
Set $propCLIENTART$  = GetProductProperty("client_art","Basic")
Set $propINSTALLUMFANG$  = GetProductProperty("install_umfang","Normal")
Set $propFIXPACK$		= GetProductProperty("fixpack-product","")
Set $LinkVzStart$		= "%CommonStartmenuDir%\Programs\Lotus Anwendungen"
Set $LinkVzDesktop$ = "%CommonDesktopDir%"
; ----------------------------------------------------------------

if not(HasMinimumSpace ("%SystemDrive%", $MinimumSpace$))
	LogError "Not enough space on %SystemDrive%, " + $MinimumSpace$ + " on drive %SystemDrive% needed for " + $ProductId$
    isFatalError
    ; Stop process and set installation status to failed
else

  comment "Check if LN component is running"
	DosInAnIcon_checkStatus
	if FileExists(""+$AnwendTemp$+"\ClientStatus.dat")
		LogError "Notes-Client gestartet, Tasks NOTES.EXE, NLNOTES.EXE bzw. NTASKLDR.EXE aktiv, Abbruch!"
    isFatalError
    ; Stop process and set installation status to failed	
	endif

	; set correct installation directory
	if (($INST_SystemType$ = "x86 System") and ($INST_architecture$ = "system specific")) or ($INST_architecture$ = "both") or ($INST_architecture$ = "32 only")
    set $InstallDir$ = $InstallDir32$
	endif
	if ($INST_SystemType$ = "64 Bit System") and (($INST_architecture$ = "system specific") or ($INST_architecture$ = "both") or ($INST_architecture$ = "64 only"))
    set $InstallDir$ = $InstallDir64$
	endif
		
	comment "Initial reboot"
	if FileExists(""+$InstallDir$+"\notes.exe")
		if not ($Flag$ = "1")
			;=========================
			; Anweisungen vor Reboot
			; Reboot initialisieren ...
			Set $Flag$ = "1"
			Registry_SaveRebootFlag
			If FileExists("%Systemroot%\rztools\eepc\epeTemporaryAutoboot.exe")
				DosInAnIcon_epe_deactivate
			EndIf
			ExitWindows /ImmediateReboot
		else
			;=========================
			; Anweisungen nach Reboot
			; Rebootflag zurücksetzen
			Set $Flag$ = "0"
			Registry_SaveRebootFlag
			; die eigentlichen Anweisungen
		endif
	endif
	
	comment "Show product picture"
	ShowBitmap "%ScriptPath%\" + $ProductId$ + ".png" $ProductId$
     
	if $LicenseRequired$ = "true"
		comment "Licensing required, reserve license and get license key"
		Sub_get_licensekey
	endif
       
	comment "Start installation..."
	
	; set variables
	if $propINSTALLART$ = "Netz"
		Set $DatenVz$ = "J:\notesdata"
	else
		Set $DatenVz$ = "C:\daten\notes\data"
	endif
	
	comment "set product state of dependend fixpack"
	if not ($propFIXPACK$ = "")
		opsiServiceCall_setProperty_FP
	endif

	Message "Installiere " + $ProductName$"

    comment "Save old ini files"
		Files_saveinis

    comment "Simulate J:\"
		If FileExists("C:\SimuJ")
			; remove, if aborted install
			DosInAnIcon_stopSimuJ
		Endif
		DosInAnIcon_startSimuJ

		comment "Remove LN if it exists"
		if FileExists(""+$InstallDir$+"\notes.exe")
			if FileExists("%ScriptPath%\delsub.opsiscript")
				comment "Start uninstall sub section"
				Sub "%ScriptPath%\delsub.opsiscript"
			endif
		endif
		
    comment "Start main setup program"
	  Winbatch_install_msi
    Sub_check_exitcode

    comment "Patch Registry"
		If $propINSTALLART$ = "Netz"
			if (($INST_SystemType$ = "x86 System") and ($INST_architecture$ = "system specific")) or ($INST_architecture$ = "both") or ($INST_architecture$ = "32 only")
				Registry_SetDataPath /32Bit
			endif
			if ($INST_SystemType$ = "64 Bit System") and (($INST_architecture$ = "system specific") or ($INST_architecture$ = "both") or ($INST_architecture$ = "64 only"))
				Registry_SetDataPath /64Bit
			endif
		endif
		If $propCLIENTART$ = "Basic"
			DosInAnIcon_PatchRegistryBasic
		endif
		If $propCLIENTART$ = "Standard"
			DosInAnIcon_PatchRegistryStandard
		endif

		comment "Copy back saved ini files"
		Files_copyinisback
		
		comment "Create program links"
		;Files_removealllinks
		LinkFolder_uninstall
		Files_createlinkvz
		If $propCLIENTART$ = "Basic"
			If $propINSTALLUMFANG$ = "Normal"
				Files_RemoveAdminDesigner
				If $propINSTALLART$ = "Netz"
					LinkFolder_BasicNetzNotes
				else
					LinkFolder_BasicLokalNotes
				Endif
			Else
				Files_RemoveDesigner
				If $propINSTALLART$ = "Netz"
					LinkFolder_BasicNetzNotes
					LinkFolder_BasicNetzAdmin
				else
					LinkFolder_BasicLokalNotes
					LinkFolder_BasicLokalAdmin
				Endif
			endif
		Else
			If $propINSTALLUMFANG$ = "Normal"
				Files_RemoveAdminDesigner
				If $propINSTALLART$ = "Netz"
					LinkFolder_StandardNetzNotes
				Else
					LinkFolder_StandardLokalNotes
				endif
			else
				If $propINSTALLART$ = "Netz"
					LinkFolder_StandardNetzNotes
					LinkFolder_StandardNetzAdmin
					LinkFolder_StandardNetzDesigner
				Else
					LinkFolder_StandardLokalNotes
					LinkFolder_StandardLokalAdmin
					LinkFolder_StandardLokalDesigner
				endif
			endif
		Endif

		comment "Install addons"
		DosInAnIcon_UnzipEXEAddOns
		If $propINSTALLART$ = "Netz"
			DosInAnIcon_UnzipDTAAddOns
		endif

		comment "Set directory access rights"
		DosInAnIcon_SetRightsPgmVz
		If $propINSTALLART$ = "Lokal"
			DosInAnIcon_SetRightsDatenVz
		endif
		
		comment "Patch PATH variable"
    ; Registry_PathAdd
		DosInAnIcon_PathAdd
		
		comment "Remove J:\ simulation"
		DosInAnIcon_stopSimuJ
		
		comment "set product state of dependend fixpack"
		if not ($propFIXPACK$ = "")
			opsiServiceCall_setAction_FP
			comment "Need a reboot to force FP installation"
			If FileExists("%Systemroot%\rztools\eepc\epeTemporaryAutoboot.exe")
				DosInAnIcon_epe_deactivate
			EndIf
			ExitWindows /Reboot
		endif

endif


; ----------------------------------------------------------------

[Sub_get_licensekey]
if opsiLicenseManagementEnabled
   comment "License management is enabled and will be used"

   comment "Trying to get a license key"
   Set $LicenseKey$ = demandLicenseKey ($LicensePool$)
   ; If there is an assignment of exactly one licensepool to the product the following call is possible:
   ; Set $LicenseKey$ = demandLicenseKey ("", $ProductId$)
   ;
   ; If there is an assignment of a license pool to a windows software id, it is possible to use:
   ; DefVar $WindowsSoftwareId$
   ; $WindowsSoftwareId$ = "..."
   ; Set $LicenseKey$ = demandLicenseKey ("", "", $WindowsSoftwareId$)

   DefVar $ServiceErrorClass$
   set $ServiceErrorClass$ = getLastServiceErrorClass
   comment "Error class: " + $ServiceErrorClass$
   
   if $ServiceErrorClass$ = "None"
      comment "Everything fine, we got the license key '" + $LicenseKey$ + "'"
   else
      if $ServiceErrorClass$ = "LicenseConfigurationError"
         LogError "Fatal: license configuration must be corrected"
         LogError getLastServiceErrorMessage
         isFatalError
      else 
         if $ServiceErrorClass$ = "LicenseMissingError"
            LogError "Fatal: required license is not supplied"
            isFatalError
         endif
      endif
   endif
else
   LogError "Fatal: license required, but license management not enabled"
   isFatalError
endif

; ----------------------------------------------------------------
; ----------------------------------------------------------------
